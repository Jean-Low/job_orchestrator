The REST API is made in FLASK and python3
It uses Amazon's Boto3 library to communicate with Amazon Lambda service

Notes:
    The database generated with this REST is volatile, so it disapears should the REST API stop running.
    Three variables are used for storing this data:
        jobs - a dictionary that stores all jobs objects. {<int>job_id: <job>job}
        users - another dictionary that stores a list of job_id's for each user. {<str>user_id:<int[]>job_ids}
        jobId - global number that stores what shlous be the next job id, for auto increment. <int>jobId
        
Routes:
    (GET) / ou /jobs:
        list all jobs currently on the server.
        
    (POST) /jobs/
        creates and run a new job.
        receives a JSON file with the format {"uid": string, "code": string, "input": "{}"}.
        uid is the user id (can be a string).
        code is the python code that one wishes to run.
        input is a string on JSON format, used to change constant fields on the code.
        
        input example:
        request: {"uid":"light","code":"print(vermelho)", "input":"{\"vermelho\":30}"}
        the input JSON will be interpreted and when code is executed, any instance of "vermelho" will be replaced by 30.
        the response for this function is "30"
        
    (POST) /jobs/run/<int:job_id>
        runs a existing job again.
        eceives a JSON file for the input only
    
    (POST) /jobs/delete/<int:job_id>
        deletes a existing job.

    (POST) /jobs/new/
        creates a job but dont run it.
        receives a JSON file with the format {"uid": string, "code": string, "input": "{}"}.
        
    (GET) /jobs/<int:job_id>
        return the job object for job_id.
        
    (GET) /user/<uid>
        return a list of all jobs from the epecified user.
